#version 430

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Cell {
	vec2 pos;
	float radius;
	float angle;
	vec3 color_rgb;
	vec3 color_hsv;
	int type_id;
	int linked_list;
	int chank_id;
};

restrict buffer ssbo_cells {
    Cell cells[];
};

struct Chunk {
	int linked_list;
	float brightness;
};

restrict buffer ssbo_grid {
    Chunk chunks[];
};

mat2 rot(float a) { //матрица поворота по заданному углу
	float s = sin(a);
	float c = cos(a);
	return mat2(c, -s, s, c);
}

void main() {
	uint workGroupID = gl_GlobalInvocationID.x * 16 + gl_GlobalInvocationID.y * 128 + gl_GlobalInvocationID.z * 1024;
	
	// строим связный список
	for (uint cid = workGroupID; cid < workGroupID + 16; cid++) {
		cells[cid].linked_list = 0;
		//int tid = atomicExchange(chunks[cells[cid].chank_id].linked_list, cells[cid].linked_list);
	}
	
	//cells[cid].pos += vec2(.00002, 0.) * rot(cells[cid].angle * 3.14159265358 * 2.);
}