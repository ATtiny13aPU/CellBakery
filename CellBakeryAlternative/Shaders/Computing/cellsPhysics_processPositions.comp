#version 430

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

uniform int Dm;

const int nullID = 0x7FFFFFFF;

readonly buffer ssbo_rand {
    uvec4 hash[];
};

struct Cell {
	ivec2 ipos;
	vec2 pos;
	float radius;
	float angle;
	vec3 color_rgb;
	vec3 color_hsv;
	int type_id;
	int linked_list;
	int chunk_id;
	int is_first;
	float weight;
	vec2 velocity;
	vec2 force;
};

restrict buffer ssbo_cells {
    Cell cells[];
};

struct Chunk {
	int first_list_ID;
	int linked_list;
	float brightness;
};

restrict buffer ssbo_grid {
    Chunk chunks[];
};


uint uhash1(uint s) {
	uvec4 s1;
	s1.xy = (uvec2(s >> 16u, s & 0xFFFFu) * hash[0].xy) + hash[0].zw;
	s1 = ((uvec4(s1.xy >> 16u, s1.xy & 0xFFFFu) * hash[1]) + hash[2]) * hash[3];
	return ((s1.x ^ s1.y) * hash[4].x) ^ ((s1.z ^ s1.w) * hash[4].y) * hash[4].w;
}

void main() {
	int workGroupID = int(gl_GlobalInvocationID.x * 16 + gl_GlobalInvocationID.y * 128 + gl_GlobalInvocationID.z * 1024);
	
	for (int cid = workGroupID; cid < workGroupID + 16; cid++) {
		if (cells[cid].force.x > 0.5) {
			cells[cid].color_rgb = vec3(0.8, 0.2, 0.2);
		//	if ((uhash1(cid) & 1u) == 0u)
		//		cells[cid].pos += (vec2(uhash1(cid), uhash1(cid + 0xFFFFFFFu))/ 4294967295.) * 0.01 - 0.005; //  vec2() 
			
		} else {
			cells[cid].color_rgb = vec3(0.3, 0.7, 0.3);
		//	cells[cid].pos += (0.) * 0.1 - 0.35; // uhash1(cid), uhash1(cid + 0xFFFFFFFu) vec2() / 4294967295.
		}


		cells[cid].force = vec2(0.);

		if (cells[cid].is_first != 0) {
			chunks[cells[cid].chunk_id].first_list_ID = nullID;
			cells[cid].is_first = 0;
		}
		
		cells[cid].linked_list = nullID;
		
		cells[cid].ipos += ivec2(floor(cells[cid].pos));
		cells[cid].chunk_id = cells[cid].ipos.x + cells[cid].ipos.y * Dm;
		cells[cid].pos = fract(cells[cid].pos);
	}
}
