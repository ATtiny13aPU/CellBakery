#version 430

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

uniform int Dm;
uniform float sdt;
uniform float sqrRp;
uniform float Dp;

const int nullID = 0x7FFFFFFF;
const int deadID = 0x7FFFFFFE;

readonly buffer ssbo_rand {
    uvec4 hash[];
};

struct Cell {
	ivec2 ipos;
	vec2 pos;
	float radius;
	float angle;
	float rotate_vel;
	vec3 color_rgb;
	vec3 color_hsv;
	int type_id;
	int linked_list;
	int chunk_id;
	int is_first;
	float weight;
	vec2 velocity;
	ivec2 force;
};

restrict buffer ssbo_cells {
    Cell cells[];
};

struct Chunk {
	int first_list_ID;
	int linked_list;
	float brightness;
};

restrict buffer ssbo_grid {
    Chunk chunks[];
};


uint uhash1(uint s) {
	uvec4 s1;
	s1.xy = (uvec2(s >> 16u, s & 0xFFFFu) * hash[0].xy) + hash[0].zw;
	s1 = ((uvec4(s1.xy >> 16u, s1.xy & 0xFFFFu) * hash[1]) + hash[2]) * hash[3];
	return ((s1.x ^ s1.y) * hash[4].x) ^ ((s1.z ^ s1.w) * hash[4].y) * hash[4].w;
}

void main() {
	int workGroupID = int(gl_GlobalInvocationID.x * 16 + gl_GlobalInvocationID.y * 128 + gl_GlobalInvocationID.z * 1024);
	
	for (int cid = workGroupID; cid < workGroupID + 16; cid++) 
		if (cells[cid].linked_list != deadID) {
	//	int ipos_t = cells[cid].ipos.x + 1 + (cells[cid].ipos.y + 1) * (Dm + 2);
	//	float sdt = mix(1. / 2000, 1. / 5, pow(chunks[ipos_t].brightness, 10.));
	//	cells[cid].color_rgb.r = chunks[ipos_t].brightness;
	//	if (dot(cells[cid].force, cells[cid].force) > 0.0000000000001) {
	//		cells[cid].color_rgb = vec3(0.8, 0.2, 0.2);
	//	} else {
	//		cells[cid].color_rgb = vec3(0.3, 0.7, 0.3);
	//	}
	
		cells[cid].color_rgb.r = length(cells[cid].force / 16777216.);

		// примен€ем cилы к скорости
		cells[cid].velocity += (cells[cid].force / 16777216.) / cells[cid].weight * sdt;
		cells[cid].force = ivec2(0.);
		vec2 v = cells[cid].velocity;
		float rv = cells[cid].rotate_vel;

		// средн€€ линейна€ скорость вращени€
		float sr_vel = cells[cid].radius * cells[cid].radius;
		sr_vel = 3.14159265 * sr_vel * sqrt(0.5) * rv;
		
		// коэффициент трени€ поко€
		/// ============================================================///
		float q = pow(0.5 + min(0.5, pow((dot(v, v) + sr_vel) * 1., 0.2)), 60. * sdt);
		//float q = 0.5 + min(0.5, pow((dot(v, v) + sr_vel) * 0.8, 0.3));

		rv *= q;
		v *= q;
		cells[cid].color_rgb.gb = vec2(1. - q);
		
		// коэффициент трени€ скольжени€
		/// ============================================================///
		q = pow(0.40, sdt);
		v *= q;
		rv *= q;


		// применение импульса к скорости
		cells[cid].pos += v * sdt;
		cells[cid].angle += rv * sdt;
		cells[cid].velocity = v;
		cells[cid].rotate_vel = rv;

		if (cells[cid].is_first != 0) {
			chunks[cells[cid].chunk_id].first_list_ID = nullID;
			cells[cid].is_first = 0;
		}
		
		cells[cid].linked_list = nullID;
		
		cells[cid].ipos += ivec2(floor(cells[cid].pos));
		cells[cid].chunk_id = cells[cid].ipos.x + cells[cid].ipos.y * Dm;
		cells[cid].pos = fract(cells[cid].pos);

		vec2 t1 = cells[cid].pos + cells[cid].ipos - Dp * 0.5;
		if (dot(t1, t1) > sqrRp)
			cells[cid].linked_list = deadID;
	}
}
