#version 430

layout(local_size_x = 1, local_size_y = 1) in;

uniform int Dm;
uniform float Dp;
uniform float Ac;

const int nullID = 0x7FFFFFFF;

struct Cell {
	ivec2 ipos;
	vec2 pos;
	float radius;
	float angle;
	vec3 color_rgb;
	vec3 color_hsv;
	int type_id;
	int linked_list;
	int chank_id;
	int is_first;
	float weight;
	vec2 velocity;
	vec2 force;
};


restrict buffer ssbo_cells {
    Cell cells[];
};

uvec2 sid;

uint ihash2(uvec2 s) {
	uint s1 = ((s.y ^ s.x) * 0xEC7269E5u + 0x4C8A248Du) ^ ((s.x >> 5u) * 0xC5EB9396u);
	s.x = ((s1 / 867u) * (s.x * 0x6C8FBCAFu)) ^ (s1 * (s.y & 0xF465C8F3u));
	
	return s.x;
}

float fhash2() {
	sid.y++;
	return (ihash2(sid) / 4294967295.f);
}

float map(float x, float in_min, float in_max, float out_min, float out_max) {
	return (clamp(x, in_min, in_max) - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

bool compareDistanse(vec2 v, float l) {
	return v.x * v.x + v.y * v.y < l * l;
}


vec3 hue(float x) {
	x = fract(x);
	float x1 = x * 6.;
	x = fract(x1);
	float r = 0., g = 0., b = 0.;

	if (x1 < 3.) {
		if (x1 < 1.) {
			r = 1.; g = x; // 1
		}
		else if (x1 < 2.) {
			g = 1.; r = 1. - x;  // 2
		}
		else {
			g = 1.; b = x;  // 3
		}
	}
	else
	{
		if (x1 < 4.) {
			b = 1.; g = 1. - x;  // 4
		}
		else if (x1 < 5.) {
			b = 1.; r = x;  // 5
		}
		else {
			r = 1.; b = 1. - x;  // 6
		}
	}
	return vec3(r, g, b);
}

vec3 sat(vec3 col, float s) {
	return mix(vec3(1.), col, s);
}

vec3 vel(vec3 col, float v) {
	return col * v;
}

vec3 HSV(float h, float s, float v) {
	vec3 col = hue(h);
	col = sat(col, s);
	col = vel(col, v);
	return col;
}

void main() {
	uint cid = gl_GlobalInvocationID.x;
	sid = uvec2(cid * 0xF8ED0C13u, 124636u ^ cid);

	float Rp = Dp / 2.;
	
	Cell cell;
	cell.pos = -vec2(Dp);
	while (compareDistanse(cell.pos - Rp, Rp) == false)
		cell.pos = vec2(fhash2(), fhash2()) * Dp;

	cell.radius = map(fhash2(), 0., 1., Ac * 0.6, Ac * 1.);
	cell.angle = 0.;

	cell.color_hsv = vec3(fhash2(), fhash2() * 0.5 + 0.5, fhash2() * 0.5 + 0.5);
	cell.color_rgb = vec3(0.5);//HSV(cell.color_hsv.r, cell.color_hsv.g, cell.color_hsv.b);

	cell.type_id = int(ihash2(sid) % 1u);

	cell.chank_id = int(cell.pos.x / Ac) + int(cell.pos.y / Ac) * Dm;
	cell.linked_list = nullID;
	cell.is_first = 0;

	cell.weight = 1.;
	cell.velocity = vec2(0.);
	cell.force = vec2(0.);

	cells[cid] = cell;
}